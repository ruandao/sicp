(restart 1)


(define (ripple-carry-adder lA lB lS)
  (define (FA-1 A B C-out S-1)
    (define x (make-wire))
    (define x1 (make-wire))
    (define (proc)
      (and-gate A B C-out)
      (inverter C-out x)
      (or-gate A B x1)
      (and-gate x x1 S-1))
      
    (add-action! A proc)
    (add-action! B proc)
    'ok)
  (define (FA-2 S-1 C-in C-out S)
    (define x (make-wire))
    (define x1 (make-wire))
    (define (proc)
      (and-gate S-1 C-in C-out)
      (inverter C-out x)
      (or-gate S-1 C-in x1)
      (and-gate x x1 S))
    (add-action! C-out proc)
    (add-action! S-1 proc)
    (add-action! C-in proc)
    'ok)
    
  (define (FA A B C-in C-out S)
    (define x (make-wire))
    (FA-1 A B C-out x)
    (FA-2 x C-in C-out S))
  (define lC (cons (map (lambda() (make-wire))
			lA)
		   (make-wire)))
  (define (carry lA lB lC LS)
    (cond
     ((null? lA) false)
     (else
      (begin (FA (car lA)
		 (car lB)
		 (car lC)
		 (cadr lC)
		 (car lS))
	     (carry (cdr lA)
		    (cdr lB)
		    (cdr lC)
		    (cdr lS))))))
  'ok)
