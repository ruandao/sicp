
(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))
    (define (empty-queue?)
      (null? front-ptr))
    (define (delete-queue!)
      (cond
       ((empty-queue?)
	(error "DELETE-QUEUE! called with empty queue"))
       ((eq? front-ptr rear-ptr)
	(set! front-ptr '())
	(set! rear-ptr '()))
       (else (set! front-ptr (cdr front-ptr)))))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
	(cond
	 ((empty-queue?)
	  (set! front-ptr new-pair)
	  (set! rear-ptr new-pair))
	 (else
	  (set-cdr! rear-ptr new-pair)
	  (set! rear-ptr new-pair)))))
    (define (front-queue)
      (cond
       ((empty-queue?)
	(error "FRONT-QUEUE called with empty queue"))
       (else (car front-ptr))))
    (define (dispatch m)
      (cond
       ((eq? m 'delete-queue!) (delete-queue!))
       ((eq? m 'insert-queue!) insert-queue!)	     
       ((eq? m 'front-queue) (front-queue))
       ((eq? m 'empty-queue?) (empty-queue?))
       (else (list "Unsupport message" m))))
    dispatch))

(define (empty-queue? q)
  (q 'empty-queue?))
(define (front-queue q)
  (q 'front-queue))  
(define (insert-queue! q item)
  ((q 'insert-queue!) item))
(define (delete-queue! q)
  (q 'delete-queue!))
