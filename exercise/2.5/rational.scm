
(load "apply-generic.scm")

(define (make-rational p2 p1)
  ((get 'make 'rational) p2 p1))

(define (install-rational-package)

  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (div n g) (div d g))))
  (define (add-rat x y)
    (make-rat (add (mul (numer x) (denom y))
		   (mul (numer y) (daenom x)))
	      (mul (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (sub (mul (numer x) (denom y))
		   (mul (numer y) (denom x)))
	      (mul (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (mul (numer x) (numer y))
	      (mul (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (mul (numer x) (denom y))
	      (mul (denom x) (numer y))))
  ;; interface
  (put 'add '(rational rational) (tag-f 'rational add-rat))
  (put 'sub '(rational rational) (tag-f 'rational sub-rat))
  (put 'mul '(rational rational) (tag-f 'rational mul-rat))
  (put 'div '(rational rational) (tag-f 'rational div-rat))
  (put 'make 'rational (tag-f 'rational make-rat))
  
  'done)
