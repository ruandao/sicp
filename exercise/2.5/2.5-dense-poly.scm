(define (install-dense-poly-package)
  (define (adjoin-term term term-list)
    (let ((len-term (length term))
          (len-list (length term-list)))
      (cond
        ((= 0 len-term) term-list)
        ((= 0 len-list) term)
        ((> len-term len-list) (cons (car term) (adjoin-term (cdr term) term-list)))
        ((< len-term len-list) (cons (car term-list) (adjoin-term term (cdr term-list))))
        ((= len-term len-list) (cons (add (car term) (car term-list)) (adjoin-term (cdr term) (cdr term-list)))))))
      
  (define (the-empty-termlist) '(0))
  (define (first-term term-list) (make-term (length term-list) (car term-list)))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list)
    (and (= (length term-list) 0)
         (= (car term-list) 0)))
  (define (make-term order coeff)
    (if (< order 0)
        '()
        (cons coeff (make-term (- order 1) 0))))
      
  (define (order term) (- (length term) 1))
  (define (coeff term) (car term))
  ;; interface
  (define (tag x)
    (attach-tag 'poly-dense x))
  (put 'empty-termlist? '(poly-dense)  (lambda (term-list) (empty-termlist? term-list)))
  (put 'negation 'poly-dense (lambda (x) (tag (negation x))))
  (put 'first-term '(poly-dense) (lambda (term-list) (tag (first-term term-list))))
  (put 'rest-terms '(poly-dense) (lambda (term-list) (tag (rest-terms term-list))))
  (put 'order '(poly-dense) order)
  (put 'coeff '(poly-dense) coeff)
  (put 'adjoin-term '(poly-dense poly-dense) (lambda (term term-list) (tag (adjoin-term term term-list))))
  (put 'make-term 'poly-dense (lambda (order coeff) (tag (make-term order coeff))))
  'done)
