;#lang planet neil/sicp 
#lang racket
(require (planet soegaard/sicp:2:1/sicp))
(define wave einstein)

(define (put x) x)
(define (get x) x)
(define (square x) (* x x))
;; type-tag, contents, attach-tag
(define (attach-tag tag contents)
  (if (number? contents)
      contents
      (cons tag contents)))

(define (type-tag value)
  (cond ((number? value) 'scheme-number)
        ((and (pair? value)
              (symbol? (car value)))
         (car value))
        (else (error "Unknown tag -- TYPE-TAG" value))))

(define (contents value)
  (cond ((number? value) value)
        ((and (pair? value)
              (symbol? (car value)))
         (cdr value))
        (else (error "Unknown contents -- CONTENTS" value))))

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (error "No method for these types -- APPLY-GENERIC"
                 (list op type-tags))))))

(define (install-scheme-number-package)
  (define (tag x)
    (attach-tag 'scheme-number x))
  (put 'add '(scheme-number scheme-number)       (lambda (x y) (tag (+ x y))))
  (put 'sub '(scheme-number scheme-number)       (lambda (x y) (tag (- x y))))
  (put 'mul '(scheme-number scheme-number)       (lambda (x y) (tag (* x y))))
  (put 'div '(scheme-number scheme-number)       (lambda (x y) (tag (/ x y))))
  (put 'equ? '(scheme-number scheme-number)      (lambda (x y) (= x y)))
  ;; interface
  (put 'make 'scheme-number
       (lambda (x) (tag x)))
  'done)


(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))
  
  (define (tag x)
    (attach-tag 'rational x))
  ;; interface
  (put 'add '(rational rational)     (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)     (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)     (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)     (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational)    (lambda (x y) (equ? x y)))
  (put 'make 'rational       (lambda (n d) (tag (make-rat n d))))
  'done)


(define (install-rectangle-package)
  ;; internal
  (define (real-part z) (car z))
  (define (imag-part z) (cdr z))
  (define (make-from-real-imag x y) (cons x y))
  (define (magnitude z)
    (sqrt (+ (square (real-part z))
             (square (imag-part z)))))
  (define (angle z)
    (atan (imag-part z) (real-part z)))
  (define (make-from-mag-ang r a)
    (cons (* r (cos a)) (* r (sin a))))
  ;; interface
  (define (tag x) (attach-tag 'rectangular x))
  (put 'real-part '(rectangular) real-part)
  (put 'imag-part '(rectangular) imag-part)
  (put 'magnitude '(rectangular) magnitude)
  (put 'angle '(rectangular) angle)
  (put 'make-from-real-imag 'rectangular (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang 'rectangular (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)

(define (install-polar-package)
  ;; internal
  (define (magnitude z) (car z))
  (define (angle z) (cdr z))
  (define (make-from-mag-ang r a) (cons r a))
  (define (real-part z)
    (* (magnitude z) (cos (angle z))))
  (define (make-from-real-imag x y)
    (cons (sqrt (+ (square x) (square y)))
          (atan y x)))
  ;; interface
  (define (tag x) (attach-tag 'polar x))
  (put 'real-part '(polar) real-part)
  (put 'imag-part '(polar) imag-part)
  (put 'magnitude '(polar) magnitude)
  (put 'angle     '(polar) angle)
  (put 'make-from-real-imag 'polar (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang   'polar (lambda (r a) (tag (make-from-mag-ang r a))))
  'done)


(define (install-complex-package)
  ;; import
  (define (make-from-real-imag x y)
    ((get 'make-from-real-imag 'rectangular) x y))
  (define (make-from-mag-ang r a)
    ((get 'make-from-mag-ang 'polar) r a))
  ;; internal
  (define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2))))
  (define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2))))
  (define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2))))
  (define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2))))
  (define (equ? z1 z2)
    (and (= (real-part z1) (real-part z2))
         (= (imag-part z1) (imag-part z2))))
  
  ;; interface
  (define (tag z) (attach-tag 'complex z))
  (put 'add       '(complex complex) (lambda (z1 z2) (tag (add-complex z1 z2))))
  (put 'sub       '(complex complex) (lambda (z1 z2) (tag (sub-complex z1 z2))))
  (put 'mul       '(complex complex) (lambda (z1 z2) (tag (mul-complex z1 z2))))
  (put 'div       '(complex complex) (lambda (z1 z2) (tag (div-complex z1 z2))))
  (put 'equ?      '(complex complex) (lambda (z1 z2) (equ? z1 z2)))
  (put 'real-part '(complex)         real-part)
  (put 'imag-part '(complex)         imag-part)
  (put 'magnitude '(complex)         magnitude)
  (put 'angle     '(complex)         angle)
  (put 'make-from-real-imag 'complex (lambda (x y) (tag (make-from-real-imag x y))))
  (put 'make-from-mag-ang   'complex (lambda (x y) (tag (make-from-mag-ang x y))))
  'done)


(define (make-rational n d)                 ((get 'make 'rational) n d))
(define (make-scheme-number n)              ((get 'make 'scheme-number) n))
(define (make-complex-from-real-imag x y)   ((get 'make-from-real-imag 'complex) x y))
(define (make-complex-from-mag-ang r a)     ((get 'make-from-mag-ang 'complex) r a))


(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (equ? x y)(apply-generic 'equ? x y))