
(define (install-rational-package)
  (define (numer x) (car x))
  (define (denom x) (cdr x))
  (define (make-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
  (define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y))))
  (define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))))
  (define (equ? x y)
    (and (= (numer x) (numer y))
         (= (denom x) (denom y))))
  (define (raise rational)
    (let ((x (contents rational)))
      ((get 'make-from-real-imag 'complex) (/ (numer x) (denom x)) 0)))

  (define (project rational-number)
    (let ((x (contents rational-number)))
      ((get 'make 'scheme-number) (/ (numer x) (denom x)))))
  
  (define (tag x)
    (attach-tag 'rational x))
  ;; interface
  (put 'add '(rational rational)     (lambda (x y) (tag (add-rat x y))))
  (put 'sub '(rational rational)     (lambda (x y) (tag (sub-rat x y))))
  (put 'mul '(rational rational)     (lambda (x y) (tag (mul-rat x y))))
  (put 'div '(rational rational)     (lambda (x y) (tag (div-rat x y))))
  (put 'equ? '(rational rational)    (lambda (x y) (equ? x y)))
  (put '=zero? '(rational)           (lambda (x) (=zero? x)))
  (put 'make 'rational       (lambda (n d) (tag (make-rat n d))))
  (put 'raise '(scheme-number) raise)
  (put 'project  '(rational) project)
  (put 'level 'rational            (lambda () (+ (get 'level 'scheme-number) 1)))
  'done)
