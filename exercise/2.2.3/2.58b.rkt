;#lang planet neil/sicp
#lang racket
;(require (planet soegaard/sicp:2:1/sicp))
;(define wave einstein)


(define (pl x)
  (display x)
  (newline))

(define (getV exp)
  (cond ((variable? exp) exp)
        ((not (pair? exp)) exp)
        ((null? (cdr exp)) (getV (car exp)))
        ((sum? exp) (make-sum (addend exp) (augend exp)))
        ((product? exp) (make-product (multiplier exp) (multiplicand exp)))
        ((exponentiation? exp)
         (make-exponentiation (base-exp exp) (exponent-exp exp)))
        (else exp)))
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (let ((m1 (multiplier exp))
               (m2 (multiplicand exp)))
               (let ((d-m1 (deriv m1 var))
                     (d-m2 (deriv m2 var)))
                 (let ((m1_dm2 (make-product m1 d-m2))
                       (dm1_m2 (make-product d-m1 m2)))
                   
                   (make-sum m1_dm2 dm1_m2)))))
        ((exponentiation? exp)
         (let ((exponent (exponent-exp exp))
               (base (base-exp exp)))
           (make-product (make-product exponent
                                       (make-exponentiation base
                                                            (make-sum exponent -1)))
                         (deriv base var))))
        (else
         (error "unknown expression type -- DERIV" exp))))

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2)
       (eq? v1 v2)))
(define (make-sum1 a1 a2) 
  (cond ((and (number? a1) (number? a2)) (+ a1 a2))
        ((eq? a1 0) a2)
        ((eq? a2 0) a1)
        (else (list a1 '+ a2))))

(define (make-sums items)
    (cond ((null? items) 0)
          ((not (pair? items)) items)
          ((null? (cdr items)) (make-sums (car items)))
          (else (let ((a1 (car items))
                      (a2 (cdr items)))
                  (make-sum1 (getV a1) (getV a2))))))
(define (make-sum . a)
  (make-sums a))

(define (make-product1 m1 m2)
  (cond ((or (eq? m1 0) (eq? m2 0)) 0)
        ((eq? m1 1) m2)
        ((eq? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list  m1 '*  m2))))

(define (make-products items)
    (cond ((null? items) 1)
          ((not (pair? items)) items)
          (else (let ((m1 (multiplier items))
                      (m2 (multiplicand items)))
                  (make-product1 (getV m1) (getV m2))))))
(define (make-product . m)
  (make-products m))

(define (sum? x)
  (and (pair? x) (pair? (cdr x))
       (or (eq? (cadr x) '+)
           (sum? (cdr x)))))

(define (addend s) 
  (define (addend-iter items)
    (cond ((eq? (car items) '+) null)
          (else (cons (car items) (addend-iter (cdr items))))))
  (getV (addend-iter s)))
    
(define (augend s)
  (cond ((eq? (car s) '+) (getV (cdr s)))
        (else (augend (cdr s)))))


(define (product? x)
  
  (and (pair? x) ; 至少有两个,才能去判断是否有3个
       (pair? (cdr x)) ; 至少有3个
       (eq? (cadr x) '*) ; 第二个符号是 *
       (not (sum? x))
       ))

(define (multiplier p) (car p))
(define (multiplicand p)
  (define (multiplicand-iter items)
    (cond ((null? items) 1)
          ((not (pair? items)) items)
          ((eq? (car items) '*) (make-product (cdr items)))
          (else (car items)))
    )
  (multiplicand-iter (cdr p)))

(define (make-exponentiation base exponent)
  (cond ((eq? exponent 1) base)
        ((eq? exponent 0) 1)
        (else (list '** base exponent))))
(define (base-exp exp) (cadr exp))
(define (exponent-exp exp) (caddr exp))
(define (exponentiation? exp) 
  (and 
;   (variable? exp) 
   (pair? exp) 
   (eq? (car exp) '**)))


;(deriv '(+ x 4 3) 'x)
;(deriv '(* x y) 'x)
;(deriv '(* (* x y) (+ x 9 3)) 'x)
;(deriv '(** (* 3 x) (+ 3 1)) 'x)

;(getV '((4 * 5)))
(product? '(4 * 5))
(getV '(4 * 5))
(sum? '(4 * 5 + 9))
(product? '(4 * 5 + 9))
(getV '(4 * 5 + 9))
(getV '((4 * 2) * 5 + (9 * 2)))
(getV '(3 + 4 * 5 + 9))
(getV '(3 * 4 * 5))
(deriv '(x + 4 + 3) 'x)
(deriv '(x * y) 'x)
(deriv '(x * y * (9 + 3)) 'x)
(deriv '(x + 3 * (x + y + 2)) 'x)