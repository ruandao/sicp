(load "apply-eval.scm")
(load "utils.scm")

(define install-pair
  (lambda()
    (define (make-text exp)
      ((get-proc '(make-text)) exp))

    (define (cons-? exp)
      (tagged-list? exp 'cons))
    (define (make-cons car cdr)
      (list 'cons car cdr))
    (define (cons-arg-car exp)
      (if (null? (cadr exp))
	  (error "cons must have 2 arguments")
	  (cadr exp)))
    (define (cons-arg-cdr exp)
      (if (null? (caddr exp))
	  (error "cons must have 2 arguments")
	  (caddr exp)))
    (define (eval-cons exp env)
      (make-cons (eval (cons-arg-car exp) env)
		 (eval (cons-arg-cdr exp) env)))
    (put-type-query! cons-? '(cons))
    (put-proc! '(eval cons) eval-cons)
    (put-proc! '(make-cons) make-cons)

    (define (car-? exp)
      (tagged-list? exp 'car))
    (define (make-car exp)
      (list 'car exp))
    (define (car-arg exp)
      (cadr exp))
    (define (eval-car exp env)
;      (newline)
;      (display "eval-car: *** ")(newline)
;      (display (eval (car-arg exp) env))(display " <--eval-car:")(newline)
;      (display "exp: ")(display exp)(newline)
;      (display "car-arg: ")(car-arg exp)(newline)
;      (display "eval-car: ### ")(newline)
      (eval (cadr (eval (car-arg exp) env))
	    env))
    
    (put-type-query! car-? '(car))
    (put-proc! '(eval car) eval-car)
    (put-proc! '(make-car) make-car)
    
    (define (cdr-? exp)
      (tagged-list? exp 'cdr))
    (define (make-cdr exp)
      (list 'cdr exp))
    (define (cdr-arg exp)
      (cadr exp))
    (define (eval-cdr exp env)
;      (display "eval-cdr: ")(display exp)(newline)
;      (display "eval-cdr-eval-arg: ")
;      (display (eval (cdr-arg exp) env))
;      (display "see preline!")(newline)
      (eval (caddr (eval (cdr-arg exp) env))
	    env))
    
    (put-type-query! cdr-? '(cdr))
    (put-proc! '(eval cdr) eval-cdr)
    (put-proc! '(make-cdr) make-cdr)
    
    (define (pair-? exp)
      (tagged-list? exp 'pair?))
    (define (make-pair? exp)
      (list 'pair? exp))
    (define (pair-arg exp)
      (cadr exp))
    (define (eval-pair? exp env)
      (tagged-list? (eval (pair-arg exp) env)
		    'cons))

    (put-type-query! pair-? '(pair?))
    (put-proc! '(eval pair?) eval-pair?)
    (put-proc! '(make-pair?) make-pair?)
    
    
    (define (null-? exp)
      (tagged-list? exp 'null?))
    (define (make-null? exp)
      (list 'null? exp))
    (define (null-arg exp)
      (cadr exp))
    (define (make-null)
      (make-text '()))
    (define (eval-null? exp env)
      (equal? (eval (null-arg exp) env)
	      (eval (make-null) env)))

    (put-type-query! null-? '(null?))
    (put-proc! '(eval null?) eval-null?)
    (put-proc! '(make-null?) make-null?)
    (put-proc! '(make-null) make-null)

    
    ))
