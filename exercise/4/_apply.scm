(load "apply-eval.scm")

(define install-apply
  (lambda()
    (define (apply? exp)
      (tagged-list? exp 'apply))
    (define (make-apply f args)
      (list 'apply f args))
    (define (apply-fun exp)
      (cadr exp))
    (define (apply-args exp)
      (caddr exp))
    (define (eval-apply exp env)
;      (newline)
;      (display "eval-apply exp: ")(display exp)(newline)
;      (display "eval-apply apply-fun: ")(display (apply-fun exp))(newline)
;      (display (map (lambda(var)(eval var env))
;		    (apply-args exp)))
;      (display "<<--eval-args")
;      (newline)
;      (display "eval-exp: ")(display (cons (apply-fun exp)
;					   (map (lambda(var)(eval var env))
;						(apply-args exp))))
					;      (newline)
      (log (cons (apply-fun exp)
		 (map (lambda(var) (eval var env))
		      (apply-args exp))))
      (log "<<-eval-apply")(logln)

      (eval (cons (apply-fun exp)
		  (map (lambda(var) (eval var env))
		       (apply-args exp)))
	    env))
    (put-type-query! apply? '(apply))
    (put-proc! '(eval apply) eval-apply)
    (put-proc! '(make-apply) make-apply)
    ))
